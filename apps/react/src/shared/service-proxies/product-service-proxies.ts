//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import axios, { AxiosError } from 'axios';
import type { AxiosInstance, AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

import moment from 'moment';

export class CategoriesServiceProxy {
    protected instance: AxiosInstance;
    protected baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance || axios.create();

        this.baseUrl = baseUrl ?? "http://localhost:8001/api/v1";

    }

    /**
     * Get Categories
     * @param maxResultCount (optional) 
     * @param skipCount (optional) 
     * @param sorting (optional) 
     * @param filters (optional) 
     * @return OK
     */
    getCategories(maxResultCount: number | undefined, skipCount: number | undefined, sorting: string | undefined, filters: string | undefined, signal?: AbortSignal): Promise<GetCategoriesResultBody> {
        let url_ = this.baseUrl + "/products/categories?";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (sorting === null)
            throw new Error("The parameter 'sorting' cannot be null.");
        else if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (filters === null)
            throw new Error("The parameter 'filters' cannot be null.");
        else if (filters !== undefined)
            url_ += "filters=" + encodeURIComponent("" + filters) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            signal
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetCategories(_response);
        });
    }

    protected processGetCategories(response: AxiosResponse): Promise<GetCategoriesResultBody> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = GetCategoriesResultBody.fromJS(resultData200);
            return Promise.resolve<GetCategoriesResultBody>(result200);

        } else {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = ErrorModel.fromJS(resultDatadefault);
            return throwException("Error", status, _responseText, _headers, resultdefault);

        }
    }

    /**
     * Create Category
     * @return OK
     */
    createCategory(body: HumaCreateCategoryRequestBody, signal?: AbortSignal): Promise<HumaCreateCategoryResultBody> {
        let url_ = this.baseUrl + "/products/category";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            signal
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCreateCategory(_response);
        });
    }

    protected processCreateCategory(response: AxiosResponse): Promise<HumaCreateCategoryResultBody> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = HumaCreateCategoryResultBody.fromJS(resultData200);
            return Promise.resolve<HumaCreateCategoryResultBody>(result200);

        } else {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = ErrorModel.fromJS(resultDatadefault);
            return throwException("Error", status, _responseText, _headers, resultdefault);

        }
    }

    /**
     * Update Category
     * @return OK
     */
    updateCategory(body: HumaUpdateCategoryRequestBody, signal?: AbortSignal): Promise<HumaUpdateCategoryResultBody> {
        let url_ = this.baseUrl + "/products/category";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            signal
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUpdateCategory(_response);
        });
    }

    protected processUpdateCategory(response: AxiosResponse): Promise<HumaUpdateCategoryResultBody> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = HumaUpdateCategoryResultBody.fromJS(resultData200);
            return Promise.resolve<HumaUpdateCategoryResultBody>(result200);

        } else {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = ErrorModel.fromJS(resultDatadefault);
            return throwException("Error", status, _responseText, _headers, resultdefault);

        }
    }

    /**
     * Delete Category
     * @return OK
     */
    deleteCategory(id: number, signal?: AbortSignal): Promise<void> {
        let url_ = this.baseUrl + "/products/category/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "DELETE",
            url: url_,
            headers: {
            },
            signal
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDeleteCategory(_response);
        });
    }

    protected processDeleteCategory(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = ErrorModel.fromJS(resultDatadefault);
            return throwException("Error", status, _responseText, _headers, resultdefault);

        }
    }

    /**
     * Get Category By Id
     * @return OK
     */
    getCategoryById(id: number, signal?: AbortSignal): Promise<GetCategoryByIdResultBody> {
        let url_ = this.baseUrl + "/products/category/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            signal
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetCategoryById(_response);
        });
    }

    protected processGetCategoryById(response: AxiosResponse): Promise<GetCategoryByIdResultBody> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = GetCategoryByIdResultBody.fromJS(resultData200);
            return Promise.resolve<GetCategoryByIdResultBody>(result200);

        } else {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = ErrorModel.fromJS(resultDatadefault);
            return throwException("Error", status, _responseText, _headers, resultdefault);

        }
    }
}

export class ProductsServiceProxy {
    protected instance: AxiosInstance;
    protected baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance || axios.create();

        this.baseUrl = baseUrl ?? "http://localhost:8001/api/v1";

    }

    /**
     * Create Product
     * @return OK
     */
    createProduct(body: HumaCreateProductRequestBody, signal?: AbortSignal): Promise<HumaCreateProductResultBody> {
        let url_ = this.baseUrl + "/products/product";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            signal
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCreateProduct(_response);
        });
    }

    protected processCreateProduct(response: AxiosResponse): Promise<HumaCreateProductResultBody> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = HumaCreateProductResultBody.fromJS(resultData200);
            return Promise.resolve<HumaCreateProductResultBody>(result200);

        } else {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = ErrorModel.fromJS(resultDatadefault);
            return throwException("Error", status, _responseText, _headers, resultdefault);

        }
    }

    /**
     * Update Product
     * @return OK
     */
    updateProduct(body: HumaUpdateProductRequestBody, signal?: AbortSignal): Promise<HumaUpdateProductResultBody> {
        let url_ = this.baseUrl + "/products/product";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            signal
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUpdateProduct(_response);
        });
    }

    protected processUpdateProduct(response: AxiosResponse): Promise<HumaUpdateProductResultBody> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = HumaUpdateProductResultBody.fromJS(resultData200);
            return Promise.resolve<HumaUpdateProductResultBody>(result200);

        } else {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = ErrorModel.fromJS(resultDatadefault);
            return throwException("Error", status, _responseText, _headers, resultdefault);

        }
    }

    /**
     * Delete Product
     * @return OK
     */
    deleteProduct(id: number, signal?: AbortSignal): Promise<void> {
        let url_ = this.baseUrl + "/products/product/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "DELETE",
            url: url_,
            headers: {
            },
            signal
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDeleteProduct(_response);
        });
    }

    protected processDeleteProduct(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = ErrorModel.fromJS(resultDatadefault);
            return throwException("Error", status, _responseText, _headers, resultdefault);

        }
    }

    /**
     * Get Product By Id
     * @return OK
     */
    getProductById(id: number, signal?: AbortSignal): Promise<GetProductByIdResultBody> {
        let url_ = this.baseUrl + "/products/product/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            signal
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetProductById(_response);
        });
    }

    protected processGetProductById(response: AxiosResponse): Promise<GetProductByIdResultBody> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = GetProductByIdResultBody.fromJS(resultData200);
            return Promise.resolve<GetProductByIdResultBody>(result200);

        } else {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = ErrorModel.fromJS(resultDatadefault);
            return throwException("Error", status, _responseText, _headers, resultdefault);

        }
    }

    /**
     * Get Products
     * @param maxResultCount (optional) 
     * @param skipCount (optional) 
     * @param sorting (optional) 
     * @param filters (optional) 
     * @param categoryIdFilter (optional) 
     * @return OK
     */
    getProducts(maxResultCount: number | undefined, skipCount: number | undefined, sorting: string | undefined, filters: string | undefined, categoryIdFilter: number | undefined, signal?: AbortSignal): Promise<GetProductsResultBody> {
        let url_ = this.baseUrl + "/products/products?";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (sorting === null)
            throw new Error("The parameter 'sorting' cannot be null.");
        else if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (filters === null)
            throw new Error("The parameter 'filters' cannot be null.");
        else if (filters !== undefined)
            url_ += "filters=" + encodeURIComponent("" + filters) + "&";
        if (categoryIdFilter === null)
            throw new Error("The parameter 'categoryIdFilter' cannot be null.");
        else if (categoryIdFilter !== undefined)
            url_ += "categoryIdFilter=" + encodeURIComponent("" + categoryIdFilter) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            signal
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetProducts(_response);
        });
    }

    protected processGetProducts(response: AxiosResponse): Promise<GetProductsResultBody> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = GetProductsResultBody.fromJS(resultData200);
            return Promise.resolve<GetProductsResultBody>(result200);

        } else {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = ErrorModel.fromJS(resultDatadefault);
            return throwException("Error", status, _responseText, _headers, resultdefault);

        }
    }
}

export class CategoryDto implements ICategoryDto {
    createdAt!: moment.Moment;
    createdBy!: NullInt64;
    id!: number;
    name!: string;
    updatedAt!: NullTime;
    updatedBy!: NullInt64;

    constructor(data?: ICategoryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.createdBy = new NullInt64();
            this.updatedAt = new NullTime();
            this.updatedBy = new NullInt64();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.createdAt = _data["createdAt"] ? moment(_data["createdAt"].toString()) : <any>undefined;
            this.createdBy = _data["createdBy"] ? NullInt64.fromJS(_data["createdBy"]) : new NullInt64();
            this.id = _data["id"];
            this.name = _data["name"];
            this.updatedAt = _data["updatedAt"] ? NullTime.fromJS(_data["updatedAt"]) : new NullTime();
            this.updatedBy = _data["updatedBy"] ? NullInt64.fromJS(_data["updatedBy"]) : new NullInt64();
        }
    }

    static fromJS(data: any): CategoryDto {
        data = typeof data === 'object' ? data : {};
        let result = new CategoryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["createdBy"] = this.createdBy ? this.createdBy.toJSON() : <any>undefined;
        data["id"] = this.id;
        data["name"] = this.name;
        data["updatedAt"] = this.updatedAt ? this.updatedAt.toJSON() : <any>undefined;
        data["updatedBy"] = this.updatedBy ? this.updatedBy.toJSON() : <any>undefined;
        return data;
    }

    clone(): CategoryDto {
        const json = this.toJSON();
        let result = new CategoryDto();
        result.init(json);
        return result;
    }
}

export interface ICategoryDto {
    createdAt: moment.Moment;
    createdBy: NullInt64;
    id: number;
    name: string;
    updatedAt: NullTime;
    updatedBy: NullInt64;
}

export class CreateOrEditCategoryDto implements ICreateOrEditCategoryDto {
    id!: number | undefined;
    name!: string;

    constructor(data?: ICreateOrEditCategoryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): CreateOrEditCategoryDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrEditCategoryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data;
    }

    clone(): CreateOrEditCategoryDto {
        const json = this.toJSON();
        let result = new CreateOrEditCategoryDto();
        result.init(json);
        return result;
    }
}

export interface ICreateOrEditCategoryDto {
    id: number | undefined;
    name: string;
}

export class CreateOrEditProductDto implements ICreateOrEditProductDto {
    categoryId!: number;
    description!: string;
    id!: number | undefined;
    name!: string;
    price!: string;
    stockQuantity!: number;

    constructor(data?: ICreateOrEditProductDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.categoryId = _data["categoryId"];
            this.description = _data["description"];
            this.id = _data["id"];
            this.name = _data["name"];
            this.price = _data["price"];
            this.stockQuantity = _data["stockQuantity"];
        }
    }

    static fromJS(data: any): CreateOrEditProductDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrEditProductDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["categoryId"] = this.categoryId;
        data["description"] = this.description;
        data["id"] = this.id;
        data["name"] = this.name;
        data["price"] = this.price;
        data["stockQuantity"] = this.stockQuantity;
        return data;
    }

    clone(): CreateOrEditProductDto {
        const json = this.toJSON();
        let result = new CreateOrEditProductDto();
        result.init(json);
        return result;
    }
}

export interface ICreateOrEditProductDto {
    categoryId: number;
    description: string;
    id: number | undefined;
    name: string;
    price: string;
    stockQuantity: number;
}

export class ErrorDetail implements IErrorDetail {
    /** Where the error occurred, e.g. 'body.items[3].tags' or 'path.thing-id' */
    location!: string;
    /** Error message text */
    message!: string;
    /** The value at the given location */
    value!: any;

    constructor(data?: IErrorDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.location = _data["location"];
            this.message = _data["message"];
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): ErrorDetail {
        data = typeof data === 'object' ? data : {};
        let result = new ErrorDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["location"] = this.location;
        data["message"] = this.message;
        data["value"] = this.value;
        return data;
    }

    clone(): ErrorDetail {
        const json = this.toJSON();
        let result = new ErrorDetail();
        result.init(json);
        return result;
    }
}

export interface IErrorDetail {
    /** Where the error occurred, e.g. 'body.items[3].tags' or 'path.thing-id' */
    location: string;
    /** Error message text */
    message: string;
    /** The value at the given location */
    value: any;
}

export class ErrorModel implements IErrorModel {
    /** A URL to the JSON Schema for this object. */
    readonly $schema!: string;
    /** A human-readable explanation specific to this occurrence of the problem. */
    detail!: string;
    /** Optional list of individual error details */
    errors!: ErrorDetail[] | undefined;
    /** A URI reference that identifies the specific occurrence of the problem. */
    instance!: string;
    /** HTTP status code */
    status!: number;
    /** A short, human-readable summary of the problem type. This value should not change between occurrences of the error. */
    title!: string;
    /** A URI reference to human-readable documentation for the error. */
    type!: string;

    constructor(data?: IErrorModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.type = "about:blank";
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).$schema = _data["$schema"];
            this.detail = _data["detail"];
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(ErrorDetail.fromJS(item));
            }
            this.instance = _data["instance"];
            this.status = _data["status"];
            this.title = _data["title"];
            this.type = _data["type"] !== undefined ? _data["type"] : "about:blank";
        }
    }

    static fromJS(data: any): ErrorModel {
        data = typeof data === 'object' ? data : {};
        let result = new ErrorModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["$schema"] = this.$schema;
        data["detail"] = this.detail;
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["instance"] = this.instance;
        data["status"] = this.status;
        data["title"] = this.title;
        data["type"] = this.type;
        return data;
    }

    clone(): ErrorModel {
        const json = this.toJSON();
        let result = new ErrorModel();
        result.init(json);
        return result;
    }
}

export interface IErrorModel {
    /** A URL to the JSON Schema for this object. */
    $schema: string;
    /** A human-readable explanation specific to this occurrence of the problem. */
    detail: string;
    /** Optional list of individual error details */
    errors: ErrorDetail[] | undefined;
    /** A URI reference that identifies the specific occurrence of the problem. */
    instance: string;
    /** HTTP status code */
    status: number;
    /** A short, human-readable summary of the problem type. This value should not change between occurrences of the error. */
    title: string;
    /** A URI reference to human-readable documentation for the error. */
    type: string;
}

export class GetCategoriesResultBody implements IGetCategoriesResultBody {
    /** A URL to the JSON Schema for this object. */
    readonly $schema!: string;
    items!: CategoryDto[] | undefined;
    totalCount!: number;

    constructor(data?: IGetCategoriesResultBody) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).$schema = _data["$schema"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(CategoryDto.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
        }
    }

    static fromJS(data: any): GetCategoriesResultBody {
        data = typeof data === 'object' ? data : {};
        let result = new GetCategoriesResultBody();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["$schema"] = this.$schema;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        return data;
    }

    clone(): GetCategoriesResultBody {
        const json = this.toJSON();
        let result = new GetCategoriesResultBody();
        result.init(json);
        return result;
    }
}

export interface IGetCategoriesResultBody {
    /** A URL to the JSON Schema for this object. */
    $schema: string;
    items: CategoryDto[] | undefined;
    totalCount: number;
}

export class GetCategoryByIdResultBody implements IGetCategoryByIdResultBody {
    /** A URL to the JSON Schema for this object. */
    readonly $schema!: string;
    category!: CreateOrEditCategoryDto;

    constructor(data?: IGetCategoryByIdResultBody) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.category = new CreateOrEditCategoryDto();
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).$schema = _data["$schema"];
            this.category = _data["Category"] ? CreateOrEditCategoryDto.fromJS(_data["Category"]) : new CreateOrEditCategoryDto();
        }
    }

    static fromJS(data: any): GetCategoryByIdResultBody {
        data = typeof data === 'object' ? data : {};
        let result = new GetCategoryByIdResultBody();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["$schema"] = this.$schema;
        data["Category"] = this.category ? this.category.toJSON() : <any>undefined;
        return data;
    }

    clone(): GetCategoryByIdResultBody {
        const json = this.toJSON();
        let result = new GetCategoryByIdResultBody();
        result.init(json);
        return result;
    }
}

export interface IGetCategoryByIdResultBody {
    /** A URL to the JSON Schema for this object. */
    $schema: string;
    category: CreateOrEditCategoryDto;
}

export class GetProductByIdResultBody implements IGetProductByIdResultBody {
    /** A URL to the JSON Schema for this object. */
    readonly $schema!: string;
    product!: CreateOrEditProductDto;

    constructor(data?: IGetProductByIdResultBody) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.product = new CreateOrEditProductDto();
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).$schema = _data["$schema"];
            this.product = _data["Product"] ? CreateOrEditProductDto.fromJS(_data["Product"]) : new CreateOrEditProductDto();
        }
    }

    static fromJS(data: any): GetProductByIdResultBody {
        data = typeof data === 'object' ? data : {};
        let result = new GetProductByIdResultBody();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["$schema"] = this.$schema;
        data["Product"] = this.product ? this.product.toJSON() : <any>undefined;
        return data;
    }

    clone(): GetProductByIdResultBody {
        const json = this.toJSON();
        let result = new GetProductByIdResultBody();
        result.init(json);
        return result;
    }
}

export interface IGetProductByIdResultBody {
    /** A URL to the JSON Schema for this object. */
    $schema: string;
    product: CreateOrEditProductDto;
}

export class GetProductsResultBody implements IGetProductsResultBody {
    /** A URL to the JSON Schema for this object. */
    readonly $schema!: string;
    items!: ProductDto[] | undefined;
    totalCount!: number;

    constructor(data?: IGetProductsResultBody) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).$schema = _data["$schema"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(ProductDto.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
        }
    }

    static fromJS(data: any): GetProductsResultBody {
        data = typeof data === 'object' ? data : {};
        let result = new GetProductsResultBody();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["$schema"] = this.$schema;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        return data;
    }

    clone(): GetProductsResultBody {
        const json = this.toJSON();
        let result = new GetProductsResultBody();
        result.init(json);
        return result;
    }
}

export interface IGetProductsResultBody {
    /** A URL to the JSON Schema for this object. */
    $schema: string;
    items: ProductDto[] | undefined;
    totalCount: number;
}

export class HumaCreateCategoryRequestBody implements IHumaCreateCategoryRequestBody {
    /** A URL to the JSON Schema for this object. */
    readonly $schema!: string;
    id!: number | undefined;
    name!: string;

    constructor(data?: IHumaCreateCategoryRequestBody) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).$schema = _data["$schema"];
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): HumaCreateCategoryRequestBody {
        data = typeof data === 'object' ? data : {};
        let result = new HumaCreateCategoryRequestBody();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["$schema"] = this.$schema;
        data["id"] = this.id;
        data["name"] = this.name;
        return data;
    }

    clone(): HumaCreateCategoryRequestBody {
        const json = this.toJSON();
        let result = new HumaCreateCategoryRequestBody();
        result.init(json);
        return result;
    }
}

export interface IHumaCreateCategoryRequestBody {
    /** A URL to the JSON Schema for this object. */
    $schema: string;
    id: number | undefined;
    name: string;
}

export class HumaCreateCategoryResultBody implements IHumaCreateCategoryResultBody {
    /** A URL to the JSON Schema for this object. */
    readonly $schema!: string;
    category!: CategoryDto;

    constructor(data?: IHumaCreateCategoryResultBody) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.category = new CategoryDto();
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).$schema = _data["$schema"];
            this.category = _data["Category"] ? CategoryDto.fromJS(_data["Category"]) : new CategoryDto();
        }
    }

    static fromJS(data: any): HumaCreateCategoryResultBody {
        data = typeof data === 'object' ? data : {};
        let result = new HumaCreateCategoryResultBody();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["$schema"] = this.$schema;
        data["Category"] = this.category ? this.category.toJSON() : <any>undefined;
        return data;
    }

    clone(): HumaCreateCategoryResultBody {
        const json = this.toJSON();
        let result = new HumaCreateCategoryResultBody();
        result.init(json);
        return result;
    }
}

export interface IHumaCreateCategoryResultBody {
    /** A URL to the JSON Schema for this object. */
    $schema: string;
    category: CategoryDto;
}

export class HumaCreateProductRequestBody implements IHumaCreateProductRequestBody {
    /** A URL to the JSON Schema for this object. */
    readonly $schema!: string;
    categoryId!: number;
    description!: string;
    id!: number | undefined;
    name!: string;
    price!: string;
    stockQuantity!: number;

    constructor(data?: IHumaCreateProductRequestBody) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).$schema = _data["$schema"];
            this.categoryId = _data["categoryId"];
            this.description = _data["description"];
            this.id = _data["id"];
            this.name = _data["name"];
            this.price = _data["price"];
            this.stockQuantity = _data["stockQuantity"];
        }
    }

    static fromJS(data: any): HumaCreateProductRequestBody {
        data = typeof data === 'object' ? data : {};
        let result = new HumaCreateProductRequestBody();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["$schema"] = this.$schema;
        data["categoryId"] = this.categoryId;
        data["description"] = this.description;
        data["id"] = this.id;
        data["name"] = this.name;
        data["price"] = this.price;
        data["stockQuantity"] = this.stockQuantity;
        return data;
    }

    clone(): HumaCreateProductRequestBody {
        const json = this.toJSON();
        let result = new HumaCreateProductRequestBody();
        result.init(json);
        return result;
    }
}

export interface IHumaCreateProductRequestBody {
    /** A URL to the JSON Schema for this object. */
    $schema: string;
    categoryId: number;
    description: string;
    id: number | undefined;
    name: string;
    price: string;
    stockQuantity: number;
}

export class HumaCreateProductResultBody implements IHumaCreateProductResultBody {
    /** A URL to the JSON Schema for this object. */
    readonly $schema!: string;
    product!: ProductDto;

    constructor(data?: IHumaCreateProductResultBody) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.product = new ProductDto();
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).$schema = _data["$schema"];
            this.product = _data["Product"] ? ProductDto.fromJS(_data["Product"]) : new ProductDto();
        }
    }

    static fromJS(data: any): HumaCreateProductResultBody {
        data = typeof data === 'object' ? data : {};
        let result = new HumaCreateProductResultBody();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["$schema"] = this.$schema;
        data["Product"] = this.product ? this.product.toJSON() : <any>undefined;
        return data;
    }

    clone(): HumaCreateProductResultBody {
        const json = this.toJSON();
        let result = new HumaCreateProductResultBody();
        result.init(json);
        return result;
    }
}

export interface IHumaCreateProductResultBody {
    /** A URL to the JSON Schema for this object. */
    $schema: string;
    product: ProductDto;
}

export class HumaUpdateCategoryRequestBody implements IHumaUpdateCategoryRequestBody {
    /** A URL to the JSON Schema for this object. */
    readonly $schema!: string;
    id!: number | undefined;
    name!: string;

    constructor(data?: IHumaUpdateCategoryRequestBody) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).$schema = _data["$schema"];
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): HumaUpdateCategoryRequestBody {
        data = typeof data === 'object' ? data : {};
        let result = new HumaUpdateCategoryRequestBody();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["$schema"] = this.$schema;
        data["id"] = this.id;
        data["name"] = this.name;
        return data;
    }

    clone(): HumaUpdateCategoryRequestBody {
        const json = this.toJSON();
        let result = new HumaUpdateCategoryRequestBody();
        result.init(json);
        return result;
    }
}

export interface IHumaUpdateCategoryRequestBody {
    /** A URL to the JSON Schema for this object. */
    $schema: string;
    id: number | undefined;
    name: string;
}

export class HumaUpdateCategoryResultBody implements IHumaUpdateCategoryResultBody {
    /** A URL to the JSON Schema for this object. */
    readonly $schema!: string;
    category!: CategoryDto;

    constructor(data?: IHumaUpdateCategoryResultBody) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.category = new CategoryDto();
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).$schema = _data["$schema"];
            this.category = _data["Category"] ? CategoryDto.fromJS(_data["Category"]) : new CategoryDto();
        }
    }

    static fromJS(data: any): HumaUpdateCategoryResultBody {
        data = typeof data === 'object' ? data : {};
        let result = new HumaUpdateCategoryResultBody();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["$schema"] = this.$schema;
        data["Category"] = this.category ? this.category.toJSON() : <any>undefined;
        return data;
    }

    clone(): HumaUpdateCategoryResultBody {
        const json = this.toJSON();
        let result = new HumaUpdateCategoryResultBody();
        result.init(json);
        return result;
    }
}

export interface IHumaUpdateCategoryResultBody {
    /** A URL to the JSON Schema for this object. */
    $schema: string;
    category: CategoryDto;
}

export class HumaUpdateProductRequestBody implements IHumaUpdateProductRequestBody {
    /** A URL to the JSON Schema for this object. */
    readonly $schema!: string;
    categoryId!: number;
    description!: string;
    id!: number | undefined;
    name!: string;
    price!: string;
    stockQuantity!: number;

    constructor(data?: IHumaUpdateProductRequestBody) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).$schema = _data["$schema"];
            this.categoryId = _data["categoryId"];
            this.description = _data["description"];
            this.id = _data["id"];
            this.name = _data["name"];
            this.price = _data["price"];
            this.stockQuantity = _data["stockQuantity"];
        }
    }

    static fromJS(data: any): HumaUpdateProductRequestBody {
        data = typeof data === 'object' ? data : {};
        let result = new HumaUpdateProductRequestBody();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["$schema"] = this.$schema;
        data["categoryId"] = this.categoryId;
        data["description"] = this.description;
        data["id"] = this.id;
        data["name"] = this.name;
        data["price"] = this.price;
        data["stockQuantity"] = this.stockQuantity;
        return data;
    }

    clone(): HumaUpdateProductRequestBody {
        const json = this.toJSON();
        let result = new HumaUpdateProductRequestBody();
        result.init(json);
        return result;
    }
}

export interface IHumaUpdateProductRequestBody {
    /** A URL to the JSON Schema for this object. */
    $schema: string;
    categoryId: number;
    description: string;
    id: number | undefined;
    name: string;
    price: string;
    stockQuantity: number;
}

export class HumaUpdateProductResultBody implements IHumaUpdateProductResultBody {
    /** A URL to the JSON Schema for this object. */
    readonly $schema!: string;
    product!: ProductDto;

    constructor(data?: IHumaUpdateProductResultBody) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.product = new ProductDto();
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).$schema = _data["$schema"];
            this.product = _data["Product"] ? ProductDto.fromJS(_data["Product"]) : new ProductDto();
        }
    }

    static fromJS(data: any): HumaUpdateProductResultBody {
        data = typeof data === 'object' ? data : {};
        let result = new HumaUpdateProductResultBody();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["$schema"] = this.$schema;
        data["Product"] = this.product ? this.product.toJSON() : <any>undefined;
        return data;
    }

    clone(): HumaUpdateProductResultBody {
        const json = this.toJSON();
        let result = new HumaUpdateProductResultBody();
        result.init(json);
        return result;
    }
}

export interface IHumaUpdateProductResultBody {
    /** A URL to the JSON Schema for this object. */
    $schema: string;
    product: ProductDto;
}

export class NullInt64 implements INullInt64 {
    int64!: number;
    valid!: boolean;

    constructor(data?: INullInt64) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.int64 = _data["Int64"];
            this.valid = _data["Valid"];
        }
    }

    static fromJS(data: any): NullInt64 {
        data = typeof data === 'object' ? data : {};
        let result = new NullInt64();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Int64"] = this.int64;
        data["Valid"] = this.valid;
        return data;
    }

    clone(): NullInt64 {
        const json = this.toJSON();
        let result = new NullInt64();
        result.init(json);
        return result;
    }
}

export interface INullInt64 {
    int64: number;
    valid: boolean;
}

export class NullTime implements INullTime {
    time!: moment.Moment;
    valid!: boolean;

    constructor(data?: INullTime) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.time = _data["Time"] ? moment(_data["Time"].toString()) : <any>undefined;
            this.valid = _data["Valid"];
        }
    }

    static fromJS(data: any): NullTime {
        data = typeof data === 'object' ? data : {};
        let result = new NullTime();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Time"] = this.time ? this.time.toISOString() : <any>undefined;
        data["Valid"] = this.valid;
        return data;
    }

    clone(): NullTime {
        const json = this.toJSON();
        let result = new NullTime();
        result.init(json);
        return result;
    }
}

export interface INullTime {
    time: moment.Moment;
    valid: boolean;
}

export class ProductDto implements IProductDto {
    categoryId!: number;
    categoryName!: string;
    description!: string;
    id!: number;
    name!: string;
    price!: string;
    stockQuantity!: number;

    constructor(data?: IProductDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.categoryId = _data["CategoryId"];
            this.categoryName = _data["CategoryName"];
            this.description = _data["Description"];
            this.id = _data["Id"];
            this.name = _data["Name"];
            this.price = _data["Price"];
            this.stockQuantity = _data["StockQuantity"];
        }
    }

    static fromJS(data: any): ProductDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProductDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["CategoryId"] = this.categoryId;
        data["CategoryName"] = this.categoryName;
        data["Description"] = this.description;
        data["Id"] = this.id;
        data["Name"] = this.name;
        data["Price"] = this.price;
        data["StockQuantity"] = this.stockQuantity;
        return data;
    }

    clone(): ProductDto {
        const json = this.toJSON();
        let result = new ProductDto();
        result.init(json);
        return result;
    }
}

export interface IProductDto {
    categoryId: number;
    categoryName: string;
    description: string;
    id: number;
    name: string;
    price: string;
    stockQuantity: number;
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

function isAxiosError(obj: any): obj is AxiosError {
    return obj && obj.isAxiosError === true;
}