//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import axios, { AxiosError } from 'axios';
import type { AxiosInstance, AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

import moment from 'moment';

export class CartsServiceProxy {
    protected instance: AxiosInstance;
    protected baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance || axios.create();

        this.baseUrl = baseUrl ?? "http://localhost:8002/api/v1";

    }

    /**
     * Add Cart
     * @return OK
     */
    addCart(body: HumaAddCartRequestBody, signal?: AbortSignal): Promise<void> {
        let url_ = this.baseUrl + "/carts/cart";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            signal
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processAddCart(_response);
        });
    }

    protected processAddCart(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = ErrorModel.fromJS(resultDatadefault);
            return throwException("Error", status, _responseText, _headers, resultdefault);

        }
    }

    /**
     * Update Cart
     * @return OK
     */
    updateCart(body: HumaUpdateCartRequestBody, signal?: AbortSignal): Promise<void> {
        let url_ = this.baseUrl + "/carts/cart";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            signal
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUpdateCart(_response);
        });
    }

    protected processUpdateCart(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = ErrorModel.fromJS(resultDatadefault);
            return throwException("Error", status, _responseText, _headers, resultdefault);

        }
    }

    /**
     * Delete Cart
     * @return OK
     */
    deleteCart(id: string, signal?: AbortSignal): Promise<void> {
        let url_ = this.baseUrl + "/carts/cart/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "DELETE",
            url: url_,
            headers: {
            },
            signal
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDeleteCart(_response);
        });
    }

    protected processDeleteCart(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = ErrorModel.fromJS(resultDatadefault);
            return throwException("Error", status, _responseText, _headers, resultdefault);

        }
    }

    /**
     * Get Carts
     * @return OK
     */
    getCarts(signal?: AbortSignal): Promise<GetCartsResultBody> {
        let url_ = this.baseUrl + "/carts/carts";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            signal
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetCarts(_response);
        });
    }

    protected processGetCarts(response: AxiosResponse): Promise<GetCartsResultBody> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = GetCartsResultBody.fromJS(resultData200);
            return Promise.resolve<GetCartsResultBody>(result200);

        } else {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = ErrorModel.fromJS(resultDatadefault);
            return throwException("Error", status, _responseText, _headers, resultdefault);

        }
    }
}

export class CartDto implements ICartDto {
    id!: string;
    isOutOfStock!: boolean;
    productDesc!: string;
    productId!: number;
    productName!: string;
    productPrice!: string;
    quantity!: number;
    userId!: number;

    constructor(data?: ICartDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["Id"];
            this.isOutOfStock = _data["IsOutOfStock"];
            this.productDesc = _data["ProductDesc"];
            this.productId = _data["ProductId"];
            this.productName = _data["ProductName"];
            this.productPrice = _data["ProductPrice"];
            this.quantity = _data["Quantity"];
            this.userId = _data["UserId"];
        }
    }

    static fromJS(data: any): CartDto {
        data = typeof data === 'object' ? data : {};
        let result = new CartDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Id"] = this.id;
        data["IsOutOfStock"] = this.isOutOfStock;
        data["ProductDesc"] = this.productDesc;
        data["ProductId"] = this.productId;
        data["ProductName"] = this.productName;
        data["ProductPrice"] = this.productPrice;
        data["Quantity"] = this.quantity;
        data["UserId"] = this.userId;
        return data;
    }

    clone(): CartDto {
        const json = this.toJSON();
        let result = new CartDto();
        result.init(json);
        return result;
    }
}

export interface ICartDto {
    id: string;
    isOutOfStock: boolean;
    productDesc: string;
    productId: number;
    productName: string;
    productPrice: string;
    quantity: number;
    userId: number;
}

export class ErrorDetail implements IErrorDetail {
    /** Where the error occurred, e.g. 'body.items[3].tags' or 'path.thing-id' */
    location!: string;
    /** Error message text */
    message!: string;
    /** The value at the given location */
    value!: any;

    constructor(data?: IErrorDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.location = _data["location"];
            this.message = _data["message"];
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): ErrorDetail {
        data = typeof data === 'object' ? data : {};
        let result = new ErrorDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["location"] = this.location;
        data["message"] = this.message;
        data["value"] = this.value;
        return data;
    }

    clone(): ErrorDetail {
        const json = this.toJSON();
        let result = new ErrorDetail();
        result.init(json);
        return result;
    }
}

export interface IErrorDetail {
    /** Where the error occurred, e.g. 'body.items[3].tags' or 'path.thing-id' */
    location: string;
    /** Error message text */
    message: string;
    /** The value at the given location */
    value: any;
}

export class ErrorModel implements IErrorModel {
    /** A URL to the JSON Schema for this object. */
    readonly $schema!: string;
    /** A human-readable explanation specific to this occurrence of the problem. */
    detail!: string;
    /** Optional list of individual error details */
    errors!: ErrorDetail[] | undefined;
    /** A URI reference that identifies the specific occurrence of the problem. */
    instance!: string;
    /** HTTP status code */
    status!: number;
    /** A short, human-readable summary of the problem type. This value should not change between occurrences of the error. */
    title!: string;
    /** A URI reference to human-readable documentation for the error. */
    type!: string;

    constructor(data?: IErrorModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.type = "about:blank";
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).$schema = _data["$schema"];
            this.detail = _data["detail"];
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(ErrorDetail.fromJS(item));
            }
            this.instance = _data["instance"];
            this.status = _data["status"];
            this.title = _data["title"];
            this.type = _data["type"] !== undefined ? _data["type"] : "about:blank";
        }
    }

    static fromJS(data: any): ErrorModel {
        data = typeof data === 'object' ? data : {};
        let result = new ErrorModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["$schema"] = this.$schema;
        data["detail"] = this.detail;
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["instance"] = this.instance;
        data["status"] = this.status;
        data["title"] = this.title;
        data["type"] = this.type;
        return data;
    }

    clone(): ErrorModel {
        const json = this.toJSON();
        let result = new ErrorModel();
        result.init(json);
        return result;
    }
}

export interface IErrorModel {
    /** A URL to the JSON Schema for this object. */
    $schema: string;
    /** A human-readable explanation specific to this occurrence of the problem. */
    detail: string;
    /** Optional list of individual error details */
    errors: ErrorDetail[] | undefined;
    /** A URI reference that identifies the specific occurrence of the problem. */
    instance: string;
    /** HTTP status code */
    status: number;
    /** A short, human-readable summary of the problem type. This value should not change between occurrences of the error. */
    title: string;
    /** A URI reference to human-readable documentation for the error. */
    type: string;
}

export class GetCartsResultBody implements IGetCartsResultBody {
    /** A URL to the JSON Schema for this object. */
    readonly $schema!: string;
    items!: CartDto[] | undefined;

    constructor(data?: IGetCartsResultBody) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).$schema = _data["$schema"];
            if (Array.isArray(_data["Items"])) {
                this.items = [] as any;
                for (let item of _data["Items"])
                    this.items!.push(CartDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetCartsResultBody {
        data = typeof data === 'object' ? data : {};
        let result = new GetCartsResultBody();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["$schema"] = this.$schema;
        if (Array.isArray(this.items)) {
            data["Items"] = [];
            for (let item of this.items)
                data["Items"].push(item.toJSON());
        }
        return data;
    }

    clone(): GetCartsResultBody {
        const json = this.toJSON();
        let result = new GetCartsResultBody();
        result.init(json);
        return result;
    }
}

export interface IGetCartsResultBody {
    /** A URL to the JSON Schema for this object. */
    $schema: string;
    items: CartDto[] | undefined;
}

export class HumaAddCartRequestBody implements IHumaAddCartRequestBody {
    /** A URL to the JSON Schema for this object. */
    readonly $schema!: string;
    productId!: number;

    constructor(data?: IHumaAddCartRequestBody) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).$schema = _data["$schema"];
            this.productId = _data["productId"];
        }
    }

    static fromJS(data: any): HumaAddCartRequestBody {
        data = typeof data === 'object' ? data : {};
        let result = new HumaAddCartRequestBody();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["$schema"] = this.$schema;
        data["productId"] = this.productId;
        return data;
    }

    clone(): HumaAddCartRequestBody {
        const json = this.toJSON();
        let result = new HumaAddCartRequestBody();
        result.init(json);
        return result;
    }
}

export interface IHumaAddCartRequestBody {
    /** A URL to the JSON Schema for this object. */
    $schema: string;
    productId: number;
}

export class HumaUpdateCartRequestBody implements IHumaUpdateCartRequestBody {
    /** A URL to the JSON Schema for this object. */
    readonly $schema!: string;
    id!: string;
    quantity!: number;

    constructor(data?: IHumaUpdateCartRequestBody) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).$schema = _data["$schema"];
            this.id = _data["id"];
            this.quantity = _data["quantity"];
        }
    }

    static fromJS(data: any): HumaUpdateCartRequestBody {
        data = typeof data === 'object' ? data : {};
        let result = new HumaUpdateCartRequestBody();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["$schema"] = this.$schema;
        data["id"] = this.id;
        data["quantity"] = this.quantity;
        return data;
    }

    clone(): HumaUpdateCartRequestBody {
        const json = this.toJSON();
        let result = new HumaUpdateCartRequestBody();
        result.init(json);
        return result;
    }
}

export interface IHumaUpdateCartRequestBody {
    /** A URL to the JSON Schema for this object. */
    $schema: string;
    id: string;
    quantity: number;
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

function isAxiosError(obj: any): obj is AxiosError {
    return obj && obj.isAxiosError === true;
}