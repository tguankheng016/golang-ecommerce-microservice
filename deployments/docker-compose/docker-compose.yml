name: go-commerce

services:
  gateway:
    image: go-commerce-gateway-local
    build:
      context: ../../
      dockerfile: gateways/web/Go.ECommerce.Gateway.Web/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Docker
    depends_on:
      - postgres-local
      - mongodb-local
      - redis-local
      - nats-local
      - jaeger-local
    ports:
      - "5144:8080"
    networks:
      - go-commerce-network

  identity-api:
    image: go-commerce-identity-api-local
    build:
      context: ../../
      dockerfile: internal/services/identity_service/Dockerfile
    environment:
      - APP_ENV=docker
    depends_on:
      - gateway
    ports:
      - "8000:8000"
    networks:
      - go-commerce-network

  # product-api:
  #   image: go-commerce-product-api-local
  #   build:
  #     context: ../../
  #     dockerfile: services/product/src/CommerceMicro.ProductService.Api/Dockerfile
  #   environment:
  #     - ASPNETCORE_ENVIRONMENT=Docker
  #   depends_on:
  #     - identity-api
  #   ports:
  #     - "5285:8080"
  #   networks:
  #     - go-commerce-network

  # cart-api:
  #   image: go-commerce-cart-api-local
  #   restart: on-failure:5
  #   build:
  #     context: ../../
  #     dockerfile: services/cart/src/CommerceMicro.CartService.Api/Dockerfile
  #   environment:
  #     - ASPNETCORE_ENVIRONMENT=Docker
  #   depends_on:
  #     - product-api
  #   ports:
  #     - "5118:8080"
  #   networks:
  #     - go-commerce-network

  postgres-local:
    container_name: postgres-local
    image: postgres:16
    ports:
      - 5434:5432
    volumes:
      - postgres-data:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: myStong_Password123#
    networks:
      - go-commerce-network

  mongodb-local:
    image: mongo:7.0
    container_name: mongodb-local
    command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27017"]
    ports:
      - "27017:27017"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    healthcheck:
      test: echo "try { rs.status() } catch (err) { rs.initiate({_id:'rs0',members:[{_id:0,host:'host.docker.internal:27017'}]}) }" | mongosh --port 27017 --quiet
      interval: 5s
      timeout: 30s
      start_period: 0s
      start_interval: 1s
      retries: 30
    volumes:
      - mongo1_data:/data/db
      - mongo1_config:/data/configdb
    networks:
      - go-commerce-network

  redis-local:
    image: redis:7.4.0-bookworm
    container_name: redis-local
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - go-commerce-network

  nats-local:
    container_name: nats-local
    image: nats:2
    ports:
      - "4222:4222"
      - "8222:8222"
    restart: unless-stopped
    command: ["-js"]
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
    networks:
      - go-commerce-network

  jaeger-local:
    container_name: jaeger-local
    image: jaegertracing/all-in-one:1.61.0
    ports:
      - "5775:5775" # for UDP sampling
      - "6831:6831/udp" # for UDP traces
      - "6832:6832/udp" # for additional UDP traces
      - "5778:5778" # for service discovery
      - "16686:16686" # for Jaeger UI
      - "14268:14268" # for HTTP collector
      - "14250:14250" # for gRPC collector
      - "4317:4317" # for HTTP collector For OpenTelemetry
      - "4318:4318" # for gRPC collector For OpenTelemetry
    networks:
      - go-commerce-network

volumes:
  postgres-data:
  mongo1_data:
  mongo1_config:
  redis-data:

networks:
  go-commerce-network:
    name: go-commerce-network
    driver: bridge
